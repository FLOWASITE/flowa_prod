import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Loader2, Sparkles } from 'lucide-react';
import { Topic } from '@/types';
import { toast } from 'sonner';

interface ContentSuggestionGeneratorProps {
  selectedTopic: Topic | null;
  selectedPlatform: string;
  onSuggestionGenerated: (suggestion: string) => void;
}

export const ContentSuggestionGenerator: React.FC<ContentSuggestionGeneratorProps> = ({
  selectedTopic,
  selectedPlatform,
  onSuggestionGenerated
}) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generateSuggestion = async () => {
    if (!selectedTopic) {
      toast.error('Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ');
      return;
    }

    setIsGenerating(true);

    try {
      // Generate a suggestion based on the topic and platform
      // This is a simple implementation; in a real app, you would call an AI API
      const platformSpecificPrompts = {
        facebook: 'm·ªôt b√†i ƒëƒÉng Facebook ng·∫Øn g·ªçn, th√¢n thi·ªán',
        instagram: 'm·ªôt caption Instagram h·∫•p d·∫´n v·ªõi hashtag',
        tiktok: 'm·ªôt script TikTok ng·∫Øn v√† thu h√∫t',
        threads: 'm·ªôt thread ng·∫Øn g·ªçn v√† th√∫ v·ªã',
        linkedin: 'm·ªôt b√†i ƒëƒÉng LinkedIn chuy√™n nghi·ªáp',
        twitter: 'm·ªôt tweet ng·∫Øn g·ªçn v√† ·∫•n t∆∞·ª£ng',
        youtube: 'm·ªôt m√¥ t·∫£ video YouTube h·∫•p d·∫´n'
      };

      const platformPrompt = platformSpecificPrompts[selectedPlatform as keyof typeof platformSpecificPrompts] || 'm·ªôt b√†i ƒëƒÉng m·∫°ng x√£ h·ªôi';
      
      // Simulate API call with a timeout
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Generate content based on topic information
      let suggestion = '';
      
      if (selectedTopic.title.includes('S·ªØa') || selectedTopic.title.includes('Milk')) {
        suggestion = `ü•õ ${selectedTopic.title}\n\nB·∫°n ƒë√£ bi·∫øt? ${selectedTopic.description}\n\nH√£y cho con y√™u c·ªßa b·∫°n tr·∫£i nghi·ªám h∆∞∆°ng v·ªã tuy·ªát v·ªùi v√† dinh d∆∞·ª°ng ƒë·∫ßy ƒë·ªß t·ª´ s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i! üí™\n\n#S·ª©cKh·ªèeTr·∫ªEm #DinhD∆∞·ª°ng #Ph√°tTri·ªÉnTo√†nDi·ªán`;
      } else {
        suggestion = `‚ú® ${selectedTopic.title}\n\n${selectedTopic.description}\n\nH√£y kh√°m ph√° ngay h√¥m nay ƒë·ªÉ kh√¥ng b·ªè l·ª° c∆° h·ªôi tuy·ªát v·ªùi n√†y!\n\n#${selectedTopic.title.replace(/\s+/g, '')} #S·∫£nPh·∫©mCh·∫•tL∆∞·ª£ng`;
      }
      
      // Adjust based on platform
      if (selectedPlatform === 'twitter') {
        // Make it shorter for Twitter
        suggestion = suggestion.split('\n\n')[0] + '\n\n' + suggestion.split('\n\n')[1];
      } else if (selectedPlatform === 'linkedin') {
        // Make it more professional for LinkedIn
        suggestion = `${selectedTopic.title}\n\nK√≠nh g·ª≠i qu√Ω kh√°ch h√†ng,\n\n${selectedTopic.description}\n\nCh√∫ng t√¥i cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao nh·∫•t cho b·∫°n v√† gia ƒë√¨nh.\n\n#${selectedTopic.title.replace(/\s+/g, '')} #Ch·∫•tL∆∞·ª£ngCaoNh·∫•t`;
      }
      
      onSuggestionGenerated(suggestion);
      toast.success('ƒê√£ t·∫°o g·ª£i √Ω n·ªôi dung th√†nh c√¥ng');
    } catch (error) {
      console.error('Error generating suggestion:', error);
      toast.error('L·ªói khi t·∫°o g·ª£i √Ω n·ªôi dung');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      type="button"
      variant="outline"
      size="sm"
      onClick={generateSuggestion}
      disabled={isGenerating || !selectedTopic}
      className="flex items-center gap-1"
    >
      {isGenerating ? (
        <>
          <Loader2 className="h-4 w-4 animate-spin" />
          <span>ƒêang t·∫°o g·ª£i √Ω...</span>
        </>
      ) : (
        <>
          <Sparkles className="h-4 w-4" />
          <span>T·∫°o g·ª£i √Ω</span>
        </>
      )}
    </Button>
  );
};
